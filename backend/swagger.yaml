openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: Comprehensive API documentation for user, order, course, cart, and layout management.

servers:
  - url: http://localhost:4000
    description: Development server

tags:
  - name: Auth
    description: User authentication and account management
  - name: Admin
    description: Administrative tasks for user management
  - name: Order
    description: Endpoints related to managing orders
  - name: Course
    description: Endpoints related to managing courses
  - name: Cart
    description: Endpoints related to cart management
  - name: Analytics
    description: Endpoints related to generating analytics reports
  - name: Layout
    description: Endpoints related to managing layouts

paths:
  ### User Routes ###
  /auth/api/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Email already exists or other validation error
        "500":
          description: Internal server error

  /auth/api/account-activate:
    post:
      summary: Activate a user account
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountActivation"
      responses:
        "200":
          description: Account activated successfully
        "400":
          description: Invalid activation code or token expired
        "500":
          description: Internal server error

  /auth/api/login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid email or password
        "403":
          description: Account is suspended or deactivated
        "500":
          description: Internal server error

  /auth/api/refresh-token:
    get:
      summary: Refresh the user's access token
      tags: [Auth]
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid refresh token or session not found
        "500":
          description: Internal server error

  /auth/api/social-auth:
    post:
      summary: Social authentication
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SocialAuth"
      responses:
        "200":
          description: User authenticated successfully
        "201":
          description: New user registered and authenticated successfully
        "400":
          description: Authentication failed
        "500":
          description: Internal server error

  /auth/api/logout:
    get:
      summary: Log out the user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out successfully
        "500":
          description: Internal server error

  /auth/api/get-user:
    get:
      summary: Get authenticated user's information
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: User not authenticated or session expired
        "500":
          description: Internal server error

  /auth/api/update-profile:
    put:
      summary: Update authenticated user's profile
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
      responses:
        "200":
          description: User profile updated successfully
        "400":
          description: Validation error or email already exists
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/update-password:
    put:
      summary: Update authenticated user's password
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePassword"
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Validation error or incorrect old password
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/deactivate:
    post:
      summary: Deactivate the authenticated user's account
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deactivation requested successfully
        "400":
          description: Deactivation request already exists
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/recover-account:
    post:
      summary: Request account recovery
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRecovery"
      responses:
        "200":
          description: Account recovery request submitted successfully
        "400":
          description: Recovery request already exists
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/user-notifications:
    get:
      summary: Get notifications for the authenticated user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /auth/api/get-users:
    get:
      summary: Get all users (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden
        "500":
          description: Internal server error

  /auth/api/delete-user/{id}:
    delete:
      summary: Delete a user by ID (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the user to delete
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/approve-recovery/{id}:
    post:
      summary: Approve account recovery (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the recovery request to approve
      responses:
        "200":
          description: Account recovery approved successfully
        "404":
          description: Recovery request not found
        "500":
          description: Internal server error

  /auth/api/reject-recovery/{id}:
    post:
      summary: Reject account recovery (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the recovery request to reject
      responses:
        "200":
          description: Account recovery rejected successfully
        "404":
          description: Recovery request not found
        "500":
          description: Internal server error

  /auth/api/suspend-user/{id}:
    post:
      summary: Suspend a user by ID (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the user to suspend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuspendUser"
      responses:
        "200":
          description: User suspended successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  /auth/api/get-notifications:
    get:
      summary: Get all notifications (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "403":
          description: Access forbidden
        "500":
          description: Internal server error

  /auth/api/update-notifications/{id}:
    put:
      summary: Update a notification by ID (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the notification to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNotification"
      responses:
        "200":
          description: Notification updated successfully
        "404":
          description: Notification not found
        "500":
          description: Internal server error

  /auth/api/update-role:
    put:
      summary: Update a user's role (Admin only)
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRole"
      responses:
        "200":
          description: User role updated successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  ### Analytics Routes ###
  /analytics/api/get-user-analytics:
    get:
      summary: Get user analytics for the last 12 months
      tags: [Analytics, Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User analytics generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAnalytics"
        "500":
          description: Internal server error

  /analytics/api/get-course-analytics:
    get:
      summary: Get course analytics for the last 12 months
      tags: [Analytics, Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Course analytics generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseAnalytics"
        "500":
          description: Internal server error

  /analytics/api/get-order-analytics:
    get:
      summary: Get order analytics for the last 12 months
      tags: [Analytics, Admin]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Order analytics generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderAnalytics"
        "500":
          description: Internal server error

  ### Order Routes ###
  /order/api/add-order:
    post:
      summary: Create a new order
      tags: [Order]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreation"
      responses:
        "201":
          description: Order created successfully
        "400":
          description: Invalid order data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /order/api/get-orders:
    get:
      summary: Get all orders (Admin only)
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden - Admins only
        "500":
          description: Internal server error

  /order/api/my-orders:
    get:
      summary: Get orders for the authenticated user
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /order/api/delete-order/{id}:
    delete:
      summary: Delete an order by ID
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the order to delete
      responses:
        "200":
          description: Order deleted successfully
        "401":
          description: User not authenticated
        "404":
          description: Order not found
        "500":
          description: Internal server error

  ### Course Routes ###
  /courses/api/create-course:
    post:
      summary: Upload a new course (Admin only)
      tags: [Course]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseCreation"
      responses:
        "201":
          description: Course uploaded successfully
        "400":
          description: Invalid course data
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden - Admins only
        "500":
          description: Internal server error

  /courses/api/edit-course/{id}:
    put:
      summary: Edit an existing course (Admin only)
      tags: [Course]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the course to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseEdit"
      responses:
        "200":
          description: Course updated successfully
        "400":
          description: Invalid course data
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden - Admins only
        "404":
          description: Course not found
        "500":
          description: Internal server error

  /courses/api/get-course/{id}:
    get:
      summary: Get details of a single course
      tags: [Course]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the course to retrieve
      responses:
        "200":
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseResponse"
        "404":
          description: Course not found
        "500":
          description: Internal server error

  /courses/api/get-courses:
    get:
      summary: Get all courses
      tags: [Course]
      responses:
        "200":
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CourseSummary"
        "500":
          description: Internal server error

  /courses/api/delete-course/{id}:
    delete:
      summary: Delete a course by ID (Admin only)
      tags: [Course]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the course to delete
      responses:
        "200":
          description: Course deleted successfully
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden - Admins only
        "404":
          description: Course not found
        "500":
          description: Internal server error

  /courses/api/get-course-content/{id}:
    get:
      summary: Get course content for the authenticated user
      tags: [Course]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the course content to retrieve
      responses:
        "200":
          description: Course content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseContent"
        "401":
          description: User not authenticated
        "404":
          description: Course content not found
        "500":
          description: Internal server error

  /courses/api/add-question:
    put:
      summary: Add a question to the course
      tags: [Course]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Question"
      responses:
        "200":
          description: Question added successfully
        "400":
          description: Invalid question data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /courses/api/add-reply:
    put:
      summary: Add a reply to a question in the course
      tags: [Course]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reply"
      responses:
        "200":
          description: Reply added successfully
        "400":
          description: Invalid reply data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /courses/api/add-review/{id}:
    put:
      summary: Add a review to a course
      tags: [Course]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the course to review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "200":
          description: Review added successfully
        "400":
          description: Invalid review data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /courses/api/add-review-reply:
    put:
      summary: Add a reply to a course review (Admin only)
      tags: [Course]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewReply"
      responses:
        "200":
          description: Reply added successfully
        "400":
          description: Invalid reply data
        "401":
          description: User not authenticated
        "403":
          description: Access forbidden - Admins only
        "500":
          description: Internal server error

  ### Cart Routes ###
  /cart/api/add-to-cart:
    post:
      summary: Add an item to the cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddToCart"
      responses:
        "200":
          description: Item added to cart successfully
        "400":
          description: Invalid cart data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /cart/api/remove-cart:
    delete:
      summary: Remove an item from the cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveFromCart"
      responses:
        "200":
          description: Item removed from cart successfully
        "400":
          description: Invalid cart data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /cart/api/get-carts:
    get:
      summary: Get the user's cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  /cart/api/checkout:
    post:
      summary: Checkout the user's cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Checkout successful
        "400":
          description: Invalid checkout data
        "401":
          description: User not authenticated
        "500":
          description: Internal server error

  ### Layout Routes ###
  /layout/create-layout:
    post:
      summary: Create a new layout
      tags: [Layout]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLayout"
      responses:
        "201":
          description: Layout created successfully
        "400":
          description: Layout type already exists
        "500":
          description: Internal server error

  /layout/get-layouts:
    get:
      summary: Get all layouts
      tags: [Layout]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Layouts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LayoutResponse"
        "404":
          description: No layouts found
        "500":
          description: Internal server error

  /layout/edit-layout/{id}:
    put:
      summary: Edit an existing layout
      tags: [Layout]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the layout to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditLayout"
      responses:
        "200":
          description: Layout updated successfully
        "400":
          description: Invalid layout type
        "404":
          description: Layout not found
        "500":
          description: Internal server error

  /layout/delete-layout/{id}:
    delete:
      summary: Delete a layout by ID
      tags: [Layout]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the layout to delete
      responses:
        "200":
          description: Layout deleted successfully
        "404":
          description: Layout not found
        "500":
          description: Internal server error

  /layout/get-layout-by-type/{type}:
    get:
      summary: Get a layout by type
      tags: [Layout]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: type
          schema:
            type: string
          required: true
          description: The type of layout to retrieve (e.g., "Banner", "FAQ", "Categories")
      responses:
        "200":
          description: Layout retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLayoutResponse"
        "404":
          description: No layout found for the specified type
        "500":
          description: Internal server error

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - fullname
        - email
        - password
      properties:
        fullname:
          type: string
          description: The user's full name
        email:
          type: string
          description: The user's email address
        password:
          type: string
          description: The user's password
        avatar:
          type: object
          description: The user's avatar information
          properties:
            public_id:
              type: string
            url:
              type: string

    AccountActivation:
      type: object
      required:
        - activation_token
        - activation_code
      properties:
        activation_token:
          type: string
          description: The token provided for account activation
        activation_code:
          type: string
          description: The code provided for account activation

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user's email address
        password:
          type: string
          description: The user's password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token

    SocialAuth:
      type: object
      required:
        - fullname
        - email
        - avatar
      properties:
        fullname:
          type: string
          description: The user's full name from the social platform
        email:
          type: string
          description: The user's email address from the social platform
        avatar:
          type: string
          description: The user's avatar URL from the social platform

    UserResponse:
      type: object
      properties:
        user:
          type: object
          description: The authenticated user's information
          properties:
            id:
              type: string
              description: The user's ID
            fullname:
              type: string
              description: The user's full name
            email:
              type: string
              description: The user's email address
            avatar:
              type: object
              description: The user's avatar information
              properties:
                public_id:
                  type: string
                url:
                  type: string

    UpdateUserProfile:
      type: object
      properties:
        fullname:
          type: string
          description: The user's full name
        email:
          type: string
          description: The user's email address
        avatar:
          type: object
          description: The user's avatar information
          properties:
            public_id:
              type: string
            url:
              type: string

    UpdatePassword:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
          description: The user's current password
        new_password:
          type: string
          description: The user's new password

    AccountRecovery:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          description: Reason for account recovery request

    NotificationsResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/Notification"

    Notification:
      type: object
      properties:
        id:
          type: string
          description: The ID of the notification
        title:
          type: string
          description: The title of the notification
        message:
          type: string
          description: The message of the notification

    UpdateNotification:
      type: object
      properties:
        status:
          type: string
          description: The new status of the notification

    UpdateUserRole:
      type: object
      required:
        - userId
        - newRole
      properties:
        userId:
          type: string
          description: The ID of the user whose role is being updated
        newRole:
          type: string
          description: The new role to assign to the user

    SuspendUser:
      type: object
      properties:
        reason:
          type: string
          description: Reason for suspension

    OrderCreation:
      type: object
      properties:
        items:
          type: array
          description: A list of items in the order
          items:
            type: object
            properties:
              productId:
                type: string
                description: The ID of the product
              quantity:
                type: integer
                description: The quantity of the product
        paymentMethod:
          type: string
          description: The payment method used for the order

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          description: The ID of the order
        userId:
          type: string
          description: The ID of the user who placed the order
        items:
          type: array
          description: A list of items in the order
          items:
            type: object
            properties:
              productId:
                type: string
                description: The ID of the product
              quantity:
                type: integer
                description: The quantity of the product
        totalAmount:
          type: number
          description: The total amount for the order
        status:
          type: string
          description: The current status of the order

    CourseCreation:
      type: object
      properties:
        title:
          type: string
          description: The title of the course
        description:
          type: string
          description: The description of the course
        content:
          type: array
          description: The content of the course
          items:
            type: object
            properties:
              title:
                type: string
                description: The title of the content item
              description:
                type: string
                description: The description of the content item

    CourseEdit:
      type: object
      properties:
        title:
          type: string
          description: The new title of the course
        description:
          type: string
          description: The new description of the course
        content:
          type: array
          description: The new content of the course
          items:
            type: object
            properties:
              title:
                type: string
                description: The title of the content item
              description:
                type: string
                description: The description of the content item

    CourseResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the course
        title:
          type: string
          description: The title of the course
        description:
          type: string
          description: The description of the course
        content:
          type: array
          description: The content of the course
          items:
            type: object
            properties:
              title:
                type: string
                description: The title of the content item
              description:
                type: string
                description: The description of the content item

    CourseSummary:
      type: object
      properties:
        id:
          type: string
          description: The ID of the course
        title:
          type: string
          description: The title of the course
        description:
          type: string
          description: The description of the course

    CourseContent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the content item
        title:
          type: string
          description: The title of the content item
        description:
          type: string
          description: The description of the content item

    Question:
      type: object
      properties:
        courseId:
          type: string
          description: The ID of the course
        question:
          type: string
          description: The question to add

    Reply:
      type: object
      properties:
        questionId:
          type: string
          description: The ID of the question
        reply:
          type: string
          description: The reply to add

    Review:
      type: object
      properties:
        review:
          type: string
          description: The review content
        rating:
          type: integer
          description: The rating for the course

    ReviewReply:
      type: object
      properties:
        reviewId:
          type: string
          description: The ID of the review
        reply:
          type: string
          description: The reply content

    AddToCart:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product to add
        quantity:
          type: integer
          description: The quantity of the product

    RemoveFromCart:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product to remove

    Cart:
      type: object
      properties:
        cart:
          type: array
          description: The user's cart items
          items:
            type: object
            properties:
              productId:
                type: string
                description: The ID of the product
              quantity:
                type: integer
                description: The quantity of the product

    UserAnalytics:
      type: object
      properties:
        last12Months:
          type: array
          description: Analytics data for the last 12 months
          items:
            type: object
            properties:
              month:
                type: string
                description: Month and year in "MMM YYYY" format
              count:
                type: integer
                description: Number of documents for the given month
              totalPurchases:
                type: number
                description: Total purchases for the given month (optional)
              totalRevenue:
                type: number
                description: Total revenue for the given month (optional)
              totalSum:
                type: number
                description: Any additional sum calculated (optional)

    CourseAnalytics:
      type: object
      properties:
        last12Months:
          type: array
          description: Analytics data for the last 12 months
          items:
            type: object
            properties:
              month:
                type: string
                description: Month and year in "MMM YYYY" format
              count:
                type: integer
                description: Number of courses for the given month
              totalPurchases:
                type: number
                description: Total purchases for the given month (optional)
              totalRevenue:
                type: number
                description: Total revenue for the given month (optional)
              totalSum:
                type: number
                description: Any additional sum calculated (optional)

    OrderAnalytics:
      type: object
      properties:
        last12Months:
          type: array
          description: Analytics data for the last 12 months
          items:
            type: object
            properties:
              month:
                type: string
                description: Month and year in "MMM YYYY" format
              count:
                type: integer
                description: Number of orders for the given month
              totalAmount:
                type: number
                description: Total order amount for the given month

    CreateLayout:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The type of layout (Banner, FAQ, Categories)
        image:
          type: string
          description: The URL of the image for Banner type
        title:
          type: string
          description: The title for Banner type
        subTitle:
          type: string
          description: The subtitle for Banner type
        faqData:
          type: array
          description: The FAQ data for FAQ type
          items:
            type: object
            properties:
              question:
                type: string
                description: The question text
              answer:
                type: string
                description: The answer text
        categoriesData:
          type: array
          description: The categories data for Categories type
          items:
            type: object
            properties:
              title:
                type: string
                description: The category title

    LayoutResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the layout
        type:
          type: string
          description: The type of layout
        banner:
          type: object
          description: Banner layout data
          properties:
            image:
              type: object
              properties:
                public_id:
                  type: string
                url:
                  type: string
            title:
              type: string
            subTitle:
              type: string
        faq:
          type: array
          description: FAQ layout data
          items:
            type: object
            properties:
              question:
                type: string
              answer:
                type: string
        categories:
          type: array
          description: Categories layout data
          items:
            type: object
            properties:
              title:
                type: string

    GetLayoutResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the layout
        type:
          type: string
          description: The type of layout (Banner, FAQ, Categories)
        banner:
          type: object
          description: Banner layout data
          properties:
            image:
              type: object
              properties:
                public_id:
                  type: string
                url:
                  type: string
            title:
              type: string
            subTitle:
              type: string
        faq:
          type: array
          description: FAQ layout data
          items:
            type: object
            properties:
              question:
                type: string
              answer:
                type: string
        categories:
          type: array
          description: Categories layout data
          items:
            type: object
            properties:
              title:
                type: string

    EditLayout:
      type: object
      properties:
        type:
          type: string
          description: The type of layout (Banner, FAQ, Categories)
        image:
          type: string
          description: The URL of the image for Banner type
        title:
          type: string
          description: The title for Banner type
        subTitle:
          type: string
          description: The subtitle for Banner type
        faqData:
          type: array
          description: The FAQ data for FAQ type
          items:
            type: object
            properties:
              question:
                type: string
              answer:
                type: string

        categoriesData:
          type: array
          description: The categories data for Categories type
          items:
            type: object
            properties:
              title:
                type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
